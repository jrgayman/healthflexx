---
---

<div class="space-y-4">
  <div class="flex items-center justify-center w-full">
    <label 
      class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100"
      id="dropzone"
    >
      <div class="flex flex-col items-center justify-center pt-5 pb-6">
        <svg class="w-8 h-8 mb-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        <p class="mb-2 text-sm text-gray-500">
          <span class="font-semibold">Click to upload</span> or drag and drop
        </p>
        <p class="text-xs text-gray-500">PNG, JPG or GIF (MAX. 2MB)</p>
      </div>
      <input 
        type="file" 
        id="imageUpload" 
        class="hidden" 
        accept="image/*"
      />
    </label>
  </div>
  
  <div id="imagePreview" class="hidden">
    <div class="relative">
      <img 
        src="#" 
        alt="Preview" 
        class="w-full h-48 object-cover rounded-lg"
      />
      <button 
        type="button"
        id="removeImage"
        class="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>

  <input type="hidden" id="imageId" name="image_id" />
</div>

<script>
  const dropzone = document.getElementById('dropzone');
  const imageUpload = document.getElementById('imageUpload');
  const imagePreview = document.getElementById('imagePreview');
  const previewImg = imagePreview?.querySelector('img');
  const removeImageBtn = document.getElementById('removeImage');
  const imageIdInput = document.getElementById('imageId');

  // Handle drag and drop
  dropzone?.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropzone.classList.add('border-primary');
  });

  dropzone?.addEventListener('dragleave', () => {
    dropzone.classList.remove('border-primary');
  });

  dropzone?.addEventListener('drop', (e) => {
    e.preventDefault();
    dropzone.classList.remove('border-primary');
    
    if (e.dataTransfer?.files.length) {
      handleFile(e.dataTransfer.files[0]);
    }
  });

  // Handle file input change
  imageUpload?.addEventListener('change', (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (file) {
      handleFile(file);
    }
  });

  // Handle file upload
  async function handleFile(file: File) {
    if (!file.type.startsWith('image/')) {
      alert('Please upload an image file');
      return;
    }

    if (file.size > 2 * 1024 * 1024) {
      alert('File size should be less than 2MB');
      return;
    }

    const formData = new FormData();
    formData.append('image', file);

    try {
      const response = await fetch('/api/images/upload', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      
      if (result.success) {
        showPreview(URL.createObjectURL(file), result.imageId);
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('Failed to upload image. Please try again.');
    }
  }

  // Show image preview
  function showPreview(url: string, imageId: string) {
    if (previewImg && imagePreview && imageIdInput) {
      previewImg.src = url;
      imagePreview.classList.remove('hidden');
      imageIdInput.value = imageId;
      dropzone?.classList.add('hidden');
    }
  }

  // Remove image
  removeImageBtn?.addEventListener('click', () => {
    if (imagePreview && imageIdInput) {
      imagePreview.classList.add('hidden');
      imageIdInput.value = '';
      dropzone?.classList.remove('hidden');
      if (imageUpload) {
        imageUpload.value = '';
      }
    }
  });

  // Initialize with existing image
  const existingImageId = imageIdInput?.value;
  if (existingImageId) {
    showPreview(`/api/images/${existingImageId}`, existingImageId);
  }
</script>