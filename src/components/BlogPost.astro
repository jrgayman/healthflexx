---
import ContentTypeIcon from './ContentTypeIcon.astro';

interface Props {
  id: string;
  title: string;
  excerpt: string;
  category: string;
  type: 'article' | 'video' | 'app' | 'weblink';
  image_id?: string;
  slug: string;
  created_at: string;
  likes: number;
}

const { id, title, excerpt, category, type, image_id, slug, created_at, likes } = Astro.props;
const formattedDate = new Date(created_at).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

const categoryTitle = category.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
---

<article class="bg-white rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden">
  {image_id && (
    <div class="relative h-48 overflow-hidden">
      <img 
        src={`/api/images/${image_id}`}
        alt={title} 
        class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-300"
      />
      <div class="absolute top-2 right-2 bg-black/75 text-white p-2 rounded-full">
        <ContentTypeIcon type={type} />
      </div>
    </div>
  )}
  <div class="p-8">
    <div class="flex items-center justify-between mb-4">
      <span class="text-sm font-medium text-primary bg-primary/10 px-4 py-1 rounded-full">
        {categoryTitle}
      </span>
      <time class="text-sm text-gray-500">{formattedDate}</time>
    </div>
    <h2 class="text-xl font-semibold text-secondary hover:text-primary transition-colors mb-3">
      <a href={`/blog/${category}/${slug}`} class="flex items-center gap-2">
        <ContentTypeIcon type={type} class="h-4 w-4" />
        {title}
      </a>
    </h2>
    <p class="text-gray-600 mb-4">{excerpt}</p>
    <div class="flex items-center justify-between">
      <a 
        href={`/blog/${category}/${slug}`} 
        class="inline-flex items-center text-primary font-medium hover:text-primary-dark transition-colors"
      >
        {type === 'app' ? 'Try App' : type === 'weblink' ? 'Visit Site' : type === 'video' ? 'Watch Video' : 'Read More'}
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </a>
      <button 
        class="like-button flex items-center space-x-1 text-gray-500 hover:text-primary transition-colors"
        data-post-id={id}
        data-likes={likes}
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
        </svg>
        <span>{likes || 0}</span>
      </button>
    </div>
  </div>
</article>

<script>
  // Initialize like buttons
  const likeButtons = document.querySelectorAll('.like-button');
  
  likeButtons.forEach(button => {
    button.addEventListener('click', async () => {
      const postId = button.dataset.postId;
      const currentLikes = parseInt(button.dataset.likes || '0');
      
      try {
        const response = await fetch(`/api/likes/${postId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          const newLikes = currentLikes + 1;
          button.dataset.likes = newLikes.toString();
          button.querySelector('span').textContent = newLikes.toString();
          button.classList.add('text-primary');
        }
      } catch (error) {
        console.error('Error updating likes:', error);
      }
    });
  });
</script>