---
interface Props {
  title: string;
  category: {
    name: string;
    icon?: string;
  };
  date: string;
  imageUrl?: string | null;
}

const { title, category, date, imageUrl } = Astro.props;

const formattedDate = new Date(date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

{imageUrl ? (
  <div class="relative h-[400px] rounded-t-xl overflow-hidden shadow-lg mb-0">
    <img 
      src={imageUrl}
      alt={title}
      class="absolute inset-0 w-full h-full object-cover"
      loading="eager"
      onError={(e) => {
        e.target.onerror = null;
        e.target.src = 'https://placehold.co/1200x400?text=Image+Not+Available';
        e.target.className = 'absolute inset-0 w-full h-full object-cover opacity-75';
      }}
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
    <div class="absolute bottom-0 left-0 right-0 p-8 text-white">
      <div class="flex items-center gap-4 mb-4">
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white/20 backdrop-blur-sm">
          {category.icon && <span class="mr-2">{category.icon}</span>}
          {category.name}
        </span>
        <time datetime={date} class="text-sm text-white/80">
          {formattedDate}
        </time>
      </div>
      <h1 class="text-4xl font-bold text-white mb-4">{title}</h1>
    </div>
  </div>
) : (
  <div class="p-8">
    <div class="flex items-center gap-4 mb-4">
      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/10 text-primary">
        {category.icon && <span class="mr-2">{category.icon}</span>}
        {category.name}
      </span>
      <time datetime={date} class="text-sm text-gray-500">
        {formattedDate}
      </time>
    </div>
    <h1 class="text-4xl font-bold text-gray-900 mb-4">{title}</h1>
  </div>
)}