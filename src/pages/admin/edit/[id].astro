---
import Layout from '../../../layouts/Layout.astro';
import { supabase } from '../../../lib/supabase';

const { id } = Astro.params;

let post = null;
if (id) {
  const { data, error } = await supabase
    .from('posts')
    .select('*')
    .eq('id', id)
    .single();
    
  if (!error) {
    post = data;
  }
}

const categories = [
  { id: 'food-cooking', title: 'Food & Cooking' },
  { id: 'fitness-exercise', title: 'Fitness & Exercise' },
  { id: 'hit', title: 'Health Imagery Training' },
  { id: 'daily-insights', title: 'Daily HealthFlexx Insights' }
];

const contentTypes = [
  { id: 'article', title: 'Article' },
  { id: 'video', title: 'Video' },
  { id: 'app', title: 'App' },
  { id: 'weblink', title: 'Web Link' }
];

const creators = [
  'James Carter',
  'Emily Johnson',
  'Carlos Martinez',
  'Ava Smith',
  'Michael Brown',
  'Sophia Davis',
  'Liam Thompson',
  'Olivia Harris',
  'Ethan Robinson',
  'Chloe Jackson'
];
---

<Layout title="Edit Content">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex items-center justify-between mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Edit Content</h1>
      <button
        onclick="history.back()"
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
      >
        ‚Üê Back
      </button>
    </div>

    {post ? (
      <form id="editForm" class="space-y-8">
        <input type="hidden" id="postId" value={post.id} />
        
        <div class="bg-white shadow rounded-lg p-6 space-y-6">
          <!-- Title and Image Preview Row -->
          <div class="flex gap-6">
            <div class="flex-1">
              <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
              <input
                type="text"
                id="title"
                name="title"
                value={post.title}
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
              />
            </div>
            
            <div class="w-32">
              {post.image_url && (
                <div class="relative group">
                  <img
                    src={post.image_url}
                    alt={post.title}
                    class="w-32 h-32 object-cover rounded-lg shadow-sm"
                  />
                  <button
                    type="button"
                    id="removeImage"
                    class="absolute inset-0 bg-black bg-opacity-50 text-white opacity-0 group-hover:opacity-100 flex items-center justify-center rounded-lg transition-opacity"
                  >
                    Remove
                  </button>
                </div>
              )}
            </div>
          </div>

          <!-- Creator, Category and Type Row -->
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-3">
            <div>
              <label for="creator" class="block text-sm font-medium text-gray-700">Creator</label>
              <select
                id="creator"
                name="creator"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
              >
                <option value="">Select Creator</option>
                {creators.map(creator => (
                  <option value={creator} selected={creator === post.creator}>
                    {creator}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
              <select
                id="category"
                name="category"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
              >
                {categories.map(category => (
                  <option value={category.id} selected={category.id === post.category}>
                    {category.title}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label for="type" class="block text-sm font-medium text-gray-700">Content Type</label>
              <select
                id="type"
                name="type"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
              >
                {contentTypes.map(type => (
                  <option value={type.id} selected={type.id === post.type}>
                    {type.title}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <!-- Image URL -->
          <div>
            <label for="image_url" class="block text-sm font-medium text-gray-700">Image URL</label>
            <input
              type="url"
              id="image_url"
              name="image_url"
              value={post.image_url}
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
            />
          </div>

          <!-- Excerpt -->
          <div>
            <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label>
            <textarea
              id="excerpt"
              name="excerpt"
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
            >{post.excerpt}</textarea>
          </div>

          <!-- Content -->
          <div>
            <label for="content" class="block text-sm font-medium text-gray-700">Content</label>
            <textarea
              id="content"
              name="content"
              rows="20"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 font-mono"
            >{post.content}</textarea>
          </div>

          <!-- Featured and Active Toggles -->
          <div class="flex gap-6">
            <label class="flex items-center">
              <input
                type="checkbox"
                id="featured"
                name="featured"
                checked={post.featured}
                class="rounded border-gray-300 text-primary focus:ring-primary"
              />
              <span class="ml-2 text-sm text-gray-700">Featured</span>
            </label>

            <label class="flex items-center">
              <input
                type="checkbox"
                id="active"
                name="active"
                checked={post.active}
                class="rounded border-gray-300 text-primary focus:ring-primary"
              />
              <span class="ml-2 text-sm text-gray-700">Active</span>
            </label>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end gap-4">
          <button
            type="button"
            onclick="history.back()"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
          >
            Save Changes
          </button>
        </div>
      </form>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-500">Content not found</p>
      </div>
    )}
  </div>
</Layout>

<script>
  import { supabase } from '../../../lib/supabase';

  // Get form elements
  const editForm = document.getElementById('editForm');
  const postId = document.getElementById('postId')?.value;
  const removeImageBtn = document.getElementById('removeImage');

  // Handle form submission
  editForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const updates = {
      title: formData.get('title'),
      category: formData.get('category'),
      type: formData.get('type'),
      creator: formData.get('creator'),
      image_url: formData.get('image_url'),
      excerpt: formData.get('excerpt'),
      content: formData.get('content'),
      featured: formData.get('featured') === 'on',
      active: formData.get('active') === 'on'
    };

    try {
      const { error } = await supabase
        .from('posts')
        .update(updates)
        .eq('id', postId);

      if (error) throw error;

      // Redirect back to manage page
      window.location.href = '/admin/manage';
    } catch (error) {
      console.error('Error updating post:', error);
      alert('Error updating post. Please try again.');
    }
  });

  // Handle image removal
  removeImageBtn?.addEventListener('click', async () => {
    if (confirm('Are you sure you want to remove the image?')) {
      try {
        const { error } = await supabase
          .from('posts')
          .update({ image_url: null })
          .eq('id', postId);

        if (error) throw error;

        // Refresh the page to show changes
        window.location.reload();
      } catch (error) {
        console.error('Error removing image:', error);
        alert('Error removing image. Please try again.');
      }
    }
  });
</script>