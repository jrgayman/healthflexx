---
import Layout from '../../layouts/Layout.astro';
import AdminNav from '../../components/AdminNav.astro';
import { supabase } from '../../lib/supabase';
import { getUser, canAccessContentManagement } from '../../lib/auth';

// Check user access
const user = getUser();
if (!user || !canAccessContentManagement(user.access_level)) {
  return Astro.redirect('/admin/login');
}

// Fetch all content
const { data: posts, error } = await supabase
  .from('posts')
  .select('*')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching content:', error);
}

const categories = [
  { id: 'food-cooking', title: 'Food & Cooking' },
  { id: 'fitness-exercise', title: 'Fitness & Exercise' },
  { id: 'hit', title: 'Health Imagery Training' },
  { id: 'daily-insights', title: 'Daily HealthFlexx Insights' }
];

const contentTypes = [
  { id: 'article', title: 'Article', icon: 'ðŸ“„' },
  { id: 'video', title: 'Video', icon: 'ðŸŽ¥' },
  { id: 'app', title: 'App', icon: 'ðŸ“±' },
  { id: 'weblink', title: 'Web Link', icon: 'ðŸ”—' }
];
---

<Layout title="Content Manager">
  <AdminNav />
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Content Manager</h1>
      <button
        id="addContentBtn"
        class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors"
      >
        + Add Content
      </button>
    </div>

    <!-- Content List -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Content</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Likes</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {posts?.map((post) => (
              <tr>
                <td class="px-6 py-4">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10 mr-4">
                      {post.image_url && (
                        <img 
                          src={post.image_url} 
                          alt="" 
                          class="h-10 w-10 rounded object-cover"
                        />
                      )}
                      {!post.image_url && (
                        <span class="text-2xl">{contentTypes.find(t => t.id === post.type)?.icon}</span>
                      )}
                    </div>
                    <div>
                      <div class="text-sm font-medium text-gray-900">{post.title}</div>
                      {post.excerpt && (
                        <div class="text-sm text-gray-500">{post.excerpt.substring(0, 100)}...</div>
                      )}
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">
                    {categories.find(c => c.id === post.category)?.title || post.category}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900 flex items-center">
                    <span class="mr-2">{contentTypes.find(t => t.id === post.type)?.icon}</span>
                    {contentTypes.find(t => t.id === post.type)?.title || post.type}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    post.active 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {post.active ? 'Active' : 'Inactive'}
                  </span>
                  {post.featured && (
                    <span class="ml-2 px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">
                      Featured
                    </span>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">{post.likes || 0}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    class="text-primary hover:text-primary-dark mr-3 edit-content"
                    data-content={JSON.stringify(post)}
                  >
                    Edit
                  </button>
                  <button
                    class="text-red-600 hover:text-red-900 delete-content"
                    data-id={post.id}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Content Modal -->
    <div id="contentModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-white rounded-lg p-8 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-6">
          <h2 id="modalTitle" class="text-2xl font-bold text-gray-900">Add Content</h2>
          <button class="close-modal text-gray-400 hover:text-gray-500">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form id="contentForm" class="space-y-6">
          <input type="hidden" id="contentId" />

          <div>
            <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
            />
          </div>

          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
              <select
                id="category"
                name="category"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
              >
                {categories.map(category => (
                  <option value={category.id}>{category.title}</option>
                ))}
              </select>
            </div>

            <div>
              <label for="type" class="block text-sm font-medium text-gray-700">Content Type</label>
              <select
                id="type"
                name="type"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
              >
                {contentTypes.map(type => (
                  <option value={type.id}>{type.icon} {type.title}</option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label for="image_url" class="block text-sm font-medium text-gray-700">Image URL</label>
            <input
              type="url"
              id="image_url"
              name="image_url"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
            />
          </div>

          <div>
            <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label>
            <textarea
              id="excerpt"
              name="excerpt"
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
            ></textarea>
          </div>

          <div>
            <label for="content" class="block text-sm font-medium text-gray-700">Content</label>
            <textarea
              id="content"
              name="content"
              rows="10"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 font-mono"
            ></textarea>
          </div>

          <div class="flex gap-4">
            <label class="flex items-center">
              <input
                type="checkbox"
                id="featured"
                name="featured"
                class="rounded border-gray-300 text-primary focus:ring-primary"
              />
              <span class="ml-2 text-sm text-gray-700">Featured</span>
            </label>

            <label class="flex items-center">
              <input
                type="checkbox"
                id="active"
                name="active"
                checked
                class="rounded border-gray-300 text-primary focus:ring-primary"
              />
              <span class="ml-2 text-sm text-gray-700">Active</span>
            </label>
          </div>

          <div class="flex justify-end gap-4">
            <button
              type="button"
              class="close-modal px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary-dark"
            >
              Save Content
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';
  import slugify from 'slugify';

  // DOM Elements
  const contentModal = document.getElementById('contentModal');
  const contentForm = document.getElementById('contentForm');
  const addContentBtn = document.getElementById('addContentBtn');
  const closeModalBtns = document.querySelectorAll('.close-modal');
  const editButtons = document.querySelectorAll('.edit-content');
  const deleteButtons = document.querySelectorAll('.delete-content');

  // Toggle modal
  function toggleModal() {
    contentModal?.classList.toggle('hidden');
    contentModal?.classList.toggle('flex');
  }

  // Reset form
  function resetForm() {
    contentForm?.reset();
    const contentId = document.getElementById('contentId');
    if (contentId) contentId.value = '';
    document.getElementById('modalTitle').textContent = 'Add Content';
  }

  // Event Listeners
  addContentBtn?.addEventListener('click', () => {
    resetForm();
    toggleModal();
  });

  closeModalBtns?.forEach(btn => {
    btn.addEventListener('click', () => {
      resetForm();
      toggleModal();
    });
  });

  editButtons?.forEach(button => {
    button.addEventListener('click', () => {
      const content = JSON.parse(button.dataset.content);
      document.getElementById('contentId').value = content.id;
      document.getElementById('title').value = content.title;
      document.getElementById('category').value = content.category;
      document.getElementById('type').value = content.type;
      document.getElementById('image_url').value = content.image_url || '';
      document.getElementById('excerpt').value = content.excerpt || '';
      document.getElementById('content').value = content.content || '';
      document.getElementById('featured').checked = content.featured;
      document.getElementById('active').checked = content.active;

      document.getElementById('modalTitle').textContent = 'Edit Content';
      toggleModal();
    });
  });

  deleteButtons?.forEach(button => {
    button.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete this content? This action cannot be undone.')) {
        const contentId = button.dataset.id;
        const { error } = await supabase
          .from('posts')
          .delete()
          .eq('id', contentId);

        if (error) {
          console.error('Error deleting content:', error);
          alert('Error deleting content. Please try again.');
        } else {
          window.location.reload();
        }
      }
    });
  });

  contentForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const contentId = document.getElementById('contentId').value;
    
    const content = {
      title: formData.get('title'),
      slug: slugify(formData.get('title'), {
        lower: true,
        strict: true,
        remove: /[*+~.()'"!:@]/g
      }),
      category: formData.get('category'),
      type: formData.get('type'),
      image_url: formData.get('image_url') || null,
      excerpt: formData.get('excerpt') || null,
      content: formData.get('content') || null,
      featured: formData.get('featured') === 'on',
      active: formData.get('active') === 'on'
    };

    try {
      let error;
      if (contentId) {
        ({ error } = await supabase
          .from('posts')
          .update(content)
          .eq('id', contentId));
      } else {
        ({ error } = await supabase
          .from('posts')
          .insert([content]));
      }

      if (error) throw error;

      window.location.reload();
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Error saving content. Please try again.');
    }
  });

  // Close modal when clicking outside
  contentModal?.addEventListener('click', (e) => {
    if (e.target === contentModal) {
      resetForm();
      toggleModal();
    }
  });
</script>