---
import Layout from '../../layouts/Layout.astro';
import AdminNav from '../../components/AdminNav.astro';
import { supabase } from '../../lib/supabase';
import { getUser, canAccessUserManagement } from '../../lib/auth';

// Check user access
const user = getUser();
if (!user || !canAccessUserManagement(user.access_level)) {
  return Astro.redirect('/');
}

// Fetch all users
const { data: users, error } = await supabase
  .from('users')
  .select('*')
  .order('name');

if (error) {
  console.error('Error fetching users:', error);
}

const accessLevels = ['Super Admin', 'Admin', 'Content Creator', 'Reader'];
---

<Layout title="User Management">
  <AdminNav />
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-gray-900">User Management</h1>
      <button
        id="addUserBtn"
        class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors"
      >
        + Add User
      </button>
    </div>

    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Access Level</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {users?.map((user) => (
              <tr>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                      <img class="h-10 w-10 rounded-full" src={user.avatar_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=random`} alt="" />
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900">{user.name}</div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">{user.email || '-'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">{user.phone || '-'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${user.access_level === 'Super Admin' ? 'bg-purple-100 text-purple-800' : 
                      user.access_level === 'Admin' ? 'bg-blue-100 text-blue-800' :
                      user.access_level === 'Content Creator' ? 'bg-green-100 text-green-800' :
                      'bg-gray-100 text-gray-800'}`}>
                    {user.access_level}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">
                    {user.last_login ? new Date(user.last_login).toLocaleString() : 'Never'}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    class="text-primary hover:text-primary-dark mr-3 edit-user"
                    data-user={JSON.stringify(user)}
                  >
                    Edit
                  </button>
                  <button
                    class="text-red-600 hover:text-red-900 ml-3 delete-user"
                    data-id={user.id}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- User Modal -->
  <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
      <div class="flex justify-between items-center mb-6">
        <h2 id="modalTitle" class="text-2xl font-bold text-gray-900">Add User</h2>
        <button class="close-modal text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <form id="userForm" class="space-y-6">
        <input type="hidden" id="userId" />
        
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
          />
        </div>

        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
          />
        </div>

        <div>
          <label for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
          <input
            type="tel"
            id="phone"
            name="phone"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
          />
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
          />
          <p class="mt-1 text-sm text-gray-500">Leave blank to keep existing password</p>
        </div>

        <div>
          <label for="access_level" class="block text-sm font-medium text-gray-700">Access Level</label>
          <select
            id="access_level"
            name="access_level"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
          >
            {accessLevels.map(level => (
              <option value={level}>{level}</option>
            ))}
          </select>
        </div>

        <button
          type="submit"
          class="w-full bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors"
        >
          Save User
        </button>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';
  import bcrypt from 'bcryptjs';

  // DOM Elements
  const userModal = document.getElementById('userModal');
  const modalTitle = document.getElementById('modalTitle');
  const userForm = document.getElementById('userForm');
  const addUserBtn = document.getElementById('addUserBtn');
  const closeModalBtns = document.querySelectorAll('.close-modal');
  const editButtons = document.querySelectorAll('.edit-user');
  const deleteButtons = document.querySelectorAll('.delete-user');

  // Toggle modal
  function toggleModal() {
    userModal?.classList.toggle('hidden');
    userModal?.classList.toggle('flex');
  }

  // Reset form
  function resetForm() {
    userForm?.reset();
    document.getElementById('userId').value = '';
    modalTitle.textContent = 'Add User';
  }

  // Event Listeners
  addUserBtn?.addEventListener('click', () => {
    resetForm();
    toggleModal();
  });

  closeModalBtns?.forEach(btn => {
    btn.addEventListener('click', () => {
      resetForm();
      toggleModal();
    });
  });

  editButtons?.forEach(button => {
    button.addEventListener('click', () => {
      const user = JSON.parse(button.dataset.user);
      document.getElementById('userId').value = user.id;
      document.getElementById('name').value = user.name;
      document.getElementById('email').value = user.email || '';
      document.getElementById('phone').value = user.phone || '';
      document.getElementById('access_level').value = user.access_level || 'Reader';
      modalTitle.textContent = 'Edit User';
      toggleModal();
    });
  });

  deleteButtons?.forEach(button => {
    button.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        const userId = button.dataset.id;
        const { error } = await supabase
          .from('users')
          .delete()
          .eq('id', userId);

        if (error) {
          alert('Error deleting user. Please try again.');
        } else {
          window.location.reload();
        }
      }
    });
  });

  userForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const userId = document.getElementById('userId').value;
    
    const userData = {
      name: formData.get('name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      access_level: formData.get('access_level')
    };

    // Hash password if provided
    const password = formData.get('password');
    if (password) {
      userData.password_hash = await bcrypt.hash(password, 10);
    }

    try {
      let error;
      if (userId) {
        // Update existing user
        ({ error } = await supabase
          .from('users')
          .update(userData)
          .eq('id', userId));
      } else {
        // Create new user with default password if not provided
        userData.password_hash = userData.password_hash || await bcrypt.hash('Healthflexx#1', 10);
        ({ error } = await supabase
          .from('users')
          .insert([userData]));
      }

      if (error) throw error;

      window.location.reload();
    } catch (error) {
      console.error('Error saving user:', error);
      alert('Error saving user. Please try again.');
    }
  });

  // Close modal when clicking outside
  userModal?.addEventListener('click', (e) => {
    if (e.target === userModal) {
      resetForm();
      toggleModal();
    }
  });
</script>